#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HospitalWebApplication.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HospitalDataBase")]
	public partial class HospitalContexctDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHospital(Hospital instance);
    partial void UpdateHospital(Hospital instance);
    partial void DeleteHospital(Hospital instance);
    #endregion
		
		public HospitalContexctDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HospitalDataBaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalContexctDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalContexctDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalContexctDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalContexctDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Hospital> Hospitals
		{
			get
			{
				return this.GetTable<Hospital>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hospital")]
	public partial class Hospital : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _firstName;
		
		private string _lastName;
		
		private int _payment;
		
		private int _hoursOfWOrk;
		
		private int _yearBirth;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void OnpaymentChanging(int value);
    partial void OnpaymentChanged();
    partial void OnhoursOfWOrkChanging(int value);
    partial void OnhoursOfWOrkChanged();
    partial void OnyearBirthChanging(int value);
    partial void OnyearBirthChanged();
    #endregion
		
		public Hospital()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string firstName
		{
			get
			{
				return this._firstName;
			}
			set
			{
				if ((this._firstName != value))
				{
					this.OnfirstNameChanging(value);
					this.SendPropertyChanging();
					this._firstName = value;
					this.SendPropertyChanged("firstName");
					this.OnfirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string lastName
		{
			get
			{
				return this._lastName;
			}
			set
			{
				if ((this._lastName != value))
				{
					this.OnlastNameChanging(value);
					this.SendPropertyChanging();
					this._lastName = value;
					this.SendPropertyChanged("lastName");
					this.OnlastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_payment", DbType="Int NOT NULL")]
		public int payment
		{
			get
			{
				return this._payment;
			}
			set
			{
				if ((this._payment != value))
				{
					this.OnpaymentChanging(value);
					this.SendPropertyChanging();
					this._payment = value;
					this.SendPropertyChanged("payment");
					this.OnpaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hoursOfWOrk", DbType="Int NOT NULL")]
		public int hoursOfWOrk
		{
			get
			{
				return this._hoursOfWOrk;
			}
			set
			{
				if ((this._hoursOfWOrk != value))
				{
					this.OnhoursOfWOrkChanging(value);
					this.SendPropertyChanging();
					this._hoursOfWOrk = value;
					this.SendPropertyChanged("hoursOfWOrk");
					this.OnhoursOfWOrkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_yearBirth", DbType="Int NOT NULL")]
		public int yearBirth
		{
			get
			{
				return this._yearBirth;
			}
			set
			{
				if ((this._yearBirth != value))
				{
					this.OnyearBirthChanging(value);
					this.SendPropertyChanging();
					this._yearBirth = value;
					this.SendPropertyChanged("yearBirth");
					this.OnyearBirthChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
